# Test Docker image for yt-dlp update integration tests
FROM node:25.0.0-alpine

# Install basic tools and pnpm
RUN apk add --no-cache curl bash
RUN npm install -g pnpm@10.18.2

# Create test directory structure
RUN mkdir -p /usr/bin /tmp

# Create mock yt-dlp binaries with different versions
RUN echo '#!/bin/sh\necho "2024.01.10"' > /usr/bin/yt-dlp && \
    chmod +x /usr/bin/yt-dlp

RUN echo '#!/bin/sh\necho "2024.02.01"' > /tmp/yt-dlp-new && \
    chmod +x /tmp/yt-dlp-new

RUN echo '#!/bin/sh\necho "2024.01.10"' > /tmp/yt-dlp-backup && \
    chmod +x /tmp/yt-dlp-backup

# Set working directory
WORKDIR /app

# Create a standalone package.json without workspace dependencies
COPY package.json ./package.json.orig
RUN node -e "\
const fs = require('fs'); \
const pkg = JSON.parse(fs.readFileSync('./package.json.orig', 'utf8')); \
delete pkg.dependencies['@lilnas/utils']; \
pkg.devDependencies = pkg.devDependencies || {}; \
Object.assign(pkg.devDependencies, { \
  '@nestjs/common': '11.0.12', \
  '@nestjs/core': '11.0.12', \
  '@nestjs/testing': '11.0.12', \
  'reflect-metadata': '0.2.2', \
  'axios': '1.8.4', \
  'fs-extra': '11.3.0', \
  'semver': '7.6.3', \
  'lodash': '4.17.21', \
  'nanoid': '5.1.5', \
  'nestjs-pino': '4.4.0', \
  'pino-http': '10.4.0', \
  'jest': '29.7.0', \
  'ts-jest': '29.2.6', \
  'typescript': '5.8.2', \
  '@types/jest': '29.5.14', \
  '@types/node': '22.13.11', \
  '@types/fs-extra': '11.0.4', \
  '@types/lodash': '4.17.16', \
  '@types/semver': '7.5.8', \
  'jest-environment-node': '29.7.0' \
}); \
fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2)); \
"

# Install dependencies using pnpm
RUN pnpm install

# Create mock @lilnas/utils modules for testing
RUN mkdir -p node_modules/@lilnas/utils/download
RUN echo 'exports.env = function(key, defaultValue) { const values = { YTDLP_AUTO_UPDATE_ENABLED: "true", YTDLP_UPDATE_MAX_RETRIES: "3", YTDLP_UPDATE_RETRY_INTERVAL: "1000", YTDLP_UPDATE_CRON: "0 3 * * *" }; return values[key] || defaultValue; };' > node_modules/@lilnas/utils/env.js
RUN echo 'export declare function env<K extends string>(key: K, defaultValue?: string): string;' > node_modules/@lilnas/utils/env.d.ts
RUN echo 'exports.getErrorMessage = function(error) { return error?.message || String(error); };' > node_modules/@lilnas/utils/error.js
RUN echo 'export declare function getErrorMessage(error: any): string;' > node_modules/@lilnas/utils/error.d.ts
RUN echo 'exports.DownloadJob = class DownloadJob { constructor() { this.url = \"\"; this.status = \"pending\"; this.title = \"\"; this.description = \"\"; this.proc = null; } }; exports.DownloadJobStatus = { Pending: \"pending\", Completed: \"completed\" };' > node_modules/@lilnas/utils/download/types.js
RUN echo 'export interface DownloadJob { url: string; status: string; title?: string; description?: string; proc?: any; } export enum DownloadJobStatus { Pending = \"pending\", Completed = \"completed\" }' > node_modules/@lilnas/utils/download/types.d.ts
RUN echo 'exports.Queue = class Queue { constructor() { this._size = 0; } size() { return this._size; } };' > node_modules/@lilnas/utils/queue.js
RUN echo 'export declare class Queue<T> { constructor(); size(): number; }' > node_modules/@lilnas/utils/queue.d.ts

# Copy source code
COPY . .

# Create a standalone tsconfig.json for the test container
RUN echo '{ \
  "compilerOptions": { \
    "target": "ES2021", \
    "module": "commonjs", \
    "moduleResolution": "node", \
    "strict": true, \
    "esModuleInterop": true, \
    "skipLibCheck": true, \
    "forceConsistentCasingInFileNames": true, \
    "declaration": true, \
    "sourceMap": true, \
    "experimentalDecorators": true, \
    "emitDecoratorMetadata": true, \
    "allowJs": true, \
    "resolveJsonModule": true, \
    "isolatedModules": true, \
    "baseUrl": ".", \
    "paths": { \
      "src/*": ["./src/*"] \
    }, \
    "lib": ["ES2021", "dom", "dom.iterable"] \
  }, \
  "include": ["src/**/*.ts", "src/**/*.tsx"], \
  "exclude": ["node_modules", "dist"] \
}' > tsconfig.json

# Create a basic jest config for integration tests
RUN echo "module.exports = { \
  preset: 'ts-jest', \
  testEnvironment: 'node', \
  roots: ['<rootDir>/src'], \
  testMatch: ['**/__tests__/**/*.spec.ts', '**/__tests__/**/*.test.ts'], \
  testPathIgnorePatterns: ['/node_modules/', '/fixtures/', '/helpers/'], \
  transform: { '^.+\\\\.ts$': ['ts-jest', { tsconfig: { experimentalDecorators: true, emitDecoratorMetadata: true } }] }, \
  transformIgnorePatterns: ['/node_modules/(?!(@lilnas|nanoid|lru-cache)/)'], \
  moduleNameMapper: { '^src/(.*)$': '<rootDir>/src/\$1' }, \
  clearMocks: true, \
  restoreMocks: true, \
  testTimeout: 10000, \
  forceExit: true, \
  maxWorkers: 1 \
};" > jest.config.js

# Set environment variables for testing
ENV NODE_ENV=test
ENV YTDLP_AUTO_UPDATE_ENABLED=true
ENV YTDLP_UPDATE_MAX_RETRIES=3
ENV YTDLP_UPDATE_RETRY_INTERVAL=1000

# Default command runs tests
CMD ["pnpm", "test"]