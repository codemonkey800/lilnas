name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]
    # Optional: Only run on specific file changes
    # paths:
    #   - "src/**/*.ts"
    #   - "src/**/*.tsx"
    #   - "src/**/*.js"
    #   - "src/**/*.jsx"
  workflow_dispatch:
    inputs:
      model:
        description: 'Claude model to use for review'
        required: false
        default: 'claude-sonnet-4-20250514'
        type: choice
        options:
          - claude-sonnet-4-20250514
          - claude-opus-4-20250514
          - claude-haiku-4-20250514
      pr_number:
        description: 'PR number to review (for manual dispatch)'
        required: false
        type: string

jobs:
  claude-review:
    # Optional: Filter by PR author
    # if: |
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.user.login == 'new-developer' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'

    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Detect changed packages
        id: detect_packages
        run: |
          # Get changed files
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ inputs.pr_number }}" ]; then
            PR_NUMBER="${{ inputs.pr_number }}"
            CHANGED_FILES=$(gh pr view $PR_NUMBER --json files --jq '.files[].path' | tr '\n' ' ')
          else
            CHANGED_FILES=$(git diff --name-only origin/main...HEAD | tr '\n' ' ')
          fi
          
          # Detect package types
          FRONTEND_NEXTJS=false
          FRONTEND_VITE=false
          BACKEND_NESTJS=false
          FULLSTACK=false
          CLI_TOOLS=false
          CONFIG_UTILS=false
          INFRA=false
          SECURITY_SENSITIVE=false
          
          # Check each changed file
          for file in $CHANGED_FILES; do
            # Frontend packages
            if [[ "$file" =~ packages/apps/ ]]; then
              FRONTEND_NEXTJS=true
            elif [[ "$file" =~ packages/dashcam/ ]]; then
              FRONTEND_VITE=true
            # Backend packages
            elif [[ "$file" =~ packages/(equations|me-token-tracker)/ ]]; then
              BACKEND_NESTJS=true
              if [[ "$file" =~ packages/equations/ ]]; then
                SECURITY_SENSITIVE=true
              fi
            # Full-stack packages
            elif [[ "$file" =~ packages/(tdr-bot|download)/ ]]; then
              FULLSTACK=true
            # CLI/Tools
            elif [[ "$file" =~ packages/cli/ ]]; then
              CLI_TOOLS=true
            # Config/Utils
            elif [[ "$file" =~ packages/(utils|eslint-config-lilnas|prettier-config-lilnas)/ ]]; then
              CONFIG_UTILS=true
            # Infrastructure
            elif [[ "$file" =~ (infra/|docker-compose|\.dockerfile|deploy\.yml) ]]; then
              INFRA=true
            fi
          done
          
          # Output detected types
          echo "frontend_nextjs=$FRONTEND_NEXTJS" >> $GITHUB_OUTPUT
          echo "frontend_vite=$FRONTEND_VITE" >> $GITHUB_OUTPUT
          echo "backend_nestjs=$BACKEND_NESTJS" >> $GITHUB_OUTPUT
          echo "fullstack=$FULLSTACK" >> $GITHUB_OUTPUT
          echo "cli_tools=$CLI_TOOLS" >> $GITHUB_OUTPUT
          echo "config_utils=$CONFIG_UTILS" >> $GITHUB_OUTPUT
          echo "infra=$INFRA" >> $GITHUB_OUTPUT
          echo "security_sensitive=$SECURITY_SENSITIVE" >> $GITHUB_OUTPUT
          
          echo "Detected package types:"
          echo "- Frontend (Next.js): $FRONTEND_NEXTJS"
          echo "- Frontend (Vite): $FRONTEND_VITE"
          echo "- Backend (NestJS): $BACKEND_NESTJS"
          echo "- Full-stack: $FULLSTACK"
          echo "- CLI/Tools: $CLI_TOOLS"
          echo "- Config/Utils: $CONFIG_UTILS"
          echo "- Infrastructure: $INFRA"
          echo "- Security Sensitive: $SECURITY_SENSITIVE"

      - name: Determine model for review
        id: determine_model
        run: |
          # Default model
          MODEL="claude-sonnet-4-20250514"

          # Check workflow dispatch input first
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ inputs.model }}" ]; then
            MODEL="${{ inputs.model }}"
          else
            # Use different models based on PR characteristics
            PR_SIZE=$(git diff --name-only origin/main...HEAD | wc -l)
            PR_TITLE="${{ github.event.pull_request.title }}"

            # Use Opus for large PRs or complex changes
            if [ "$PR_SIZE" -gt 10 ] || echo "$PR_TITLE" | grep -iE "(refactor|architecture|breaking)" > /dev/null; then
              MODEL="claude-opus-4-20250514"
              echo "Using Opus model for large/complex PR (${PR_SIZE} files changed)"
            # Use Haiku for documentation or simple changes
            elif echo "$PR_TITLE" | grep -iE "(docs|documentation|readme|typo|fix typo)" > /dev/null; then
              MODEL="claude-haiku-4-20250514"
              echo "Using Haiku model for documentation changes"
            else
              echo "Using default Sonnet model"
            fi
          fi

          echo "model=$MODEL" >> $GITHUB_OUTPUT
          echo "Selected model: $MODEL"

      - name: Generate package-specific review prompt
        id: generate_prompt
        run: |
          # Start with base review criteria
          PROMPT="Please review this pull request for the LilNAS monorepo with focus on:

          ## General Code Quality
          - Code quality adhering to the project's prettier and eslint configurations
          - Potential bugs, runtime errors, or logic issues
          - Performance considerations and optimization opportunities
          - Security vulnerabilities or unsafe practices
          - Test coverage and test quality
          - Error handling and edge case coverage
          - TypeScript type safety (avoid 'any' types)
          - Memory leaks and resource management

          ## Monorepo Best Practices
          - Proper use of workspace dependencies (workspace:*)
          - Cross-package compatibility
          - Build process integrity with Turbo
          - Consistent patterns across similar packages"
          
          # Add frontend Next.js specific criteria
          if [ "${{ steps.detect_packages.outputs.frontend_nextjs }}" == "true" ]; then
            PROMPT="$PROMPT

          ## Frontend (Next.js) Specific Review Points
          - React best practices and proper hooks usage
          - Next.js 14 App Router patterns and conventions
          - Correct client/server component boundaries ('use client' directives)
          - Tailwind CSS consistency and utility class usage
          - Component composition, reusability, and prop drilling avoidance
          - State management with Jotai atoms and patterns
          - Image optimization using next/image
          - API route security and data validation
          - SEO considerations (metadata, dynamic OG images)
          - Loading and error boundary implementations
          - Bundle size optimization"
          fi
          
          # Add frontend Vite specific criteria
          if [ "${{ steps.detect_packages.outputs.frontend_vite }}" == "true" ]; then
            PROMPT="$PROMPT

          ## Frontend (Vite+React) Specific Review Points
          - React best practices and hooks patterns
          - Vite configuration and build optimization
          - Component architecture and composition
          - State management patterns
          - Asset handling and lazy loading
          - Development vs production build considerations"
          fi
          
          # Add backend NestJS specific criteria
          if [ "${{ steps.detect_packages.outputs.backend_nestjs }}" == "true" ]; then
            PROMPT="$PROMPT

          ## Backend (NestJS) Specific Review Points
          - NestJS module structure and dependency injection patterns
          - Controller input validation using Zod schemas
          - Service layer separation and business logic organization
          - Error handling with proper HTTP status codes
          - Database query optimization and N+1 query prevention
          - API documentation and OpenAPI/Swagger compliance
          - Authentication and authorization middleware
          - Logging patterns and monitoring considerations
          - Rate limiting and throttling implementation
          - Environment variable usage and configuration"
          fi
          
          # Add full-stack specific criteria
          if [ "${{ steps.detect_packages.outputs.fullstack }}" == "true" ]; then
            PROMPT="$PROMPT

          ## Full-Stack Application Review Points
          - API and frontend type consistency
          - Shared validation schemas between frontend and backend
          - Build process for both frontend and backend
          - Environment variable management across stack
          - CORS and security headers configuration
          - End-to-end type safety
          - API error handling on the frontend
          - Loading states and optimistic updates"
          fi
          
          # Add CLI specific criteria
          if [ "${{ steps.detect_packages.outputs.cli_tools }}" == "true" ]; then
            PROMPT="$PROMPT

          ## CLI Tool Review Points
          - Command structure and yargs configuration
          - Error messages and user feedback clarity
          - File system operations safety and error handling
          - Shell command execution security
          - Cross-platform compatibility (Windows/Mac/Linux)
          - Help text completeness and examples
          - Exit codes and error propagation
          - Test coverage (especially important for CLI tools)"
          fi
          
          # Add config/utils specific criteria
          if [ "${{ steps.detect_packages.outputs.config_utils }}" == "true" ]; then
            PROMPT="$PROMPT

          ## Configuration and Utilities Review Points
          - Cross-package compatibility and breaking changes
          - Type definitions and exports completeness
          - Documentation and JSDoc comments
          - Backward compatibility considerations
          - Tree-shaking and bundle size impact
          - Peer dependency management"
          fi
          
          # Add infrastructure specific criteria
          if [ "${{ steps.detect_packages.outputs.infra }}" == "true" ]; then
            PROMPT="$PROMPT

          ## Infrastructure and Docker Review Points
          - Multi-stage Docker build optimization
          - Base image selection and security updates
          - Volume mounts and file permissions
          - Environment variable exposure and secrets management
          - Container resource limits and health checks
          - Docker Compose service dependencies
          - Development vs production configuration separation
          - Traefik routing and SSL configuration
          - Container restart policies and logging"
          fi
          
          # Add security-sensitive criteria for equations service
          if [ "${{ steps.detect_packages.outputs.security_sensitive }}" == "true" ]; then
            PROMPT="$PROMPT

          ## CRITICAL SECURITY REVIEW (Equations Service)
          - LaTeX command injection prevention
          - Input validation completeness against dangerous commands
          - Docker sandbox escape prevention
          - Resource consumption limits (CPU, memory, disk)
          - File system access restrictions
          - Command execution using secure spawn patterns
          - Rate limiting effectiveness
          - Error messages not leaking system information
          - Temporary file cleanup
          - Process timeout enforcement"
          fi
          
          # Add footer with context
          PROMPT="$PROMPT

          ## Additional Context
          - This is a self-hosted NAS system monorepo
          - Follow existing patterns in the codebase
          - Consider security implications for all changes
          - Ensure changes maintain backward compatibility
          - Verify changes work in both development and production environments
          
          Please provide constructive feedback focusing on the most important issues first. Suggest specific improvements and include code examples where helpful."
          
          # Save the prompt to a file to handle special characters
          echo "$PROMPT" > /tmp/review_prompt.txt
          
          # Output the prompt location
          echo "prompt_file=/tmp/review_prompt.txt" >> $GITHUB_OUTPUT

      - name: Load review prompt
        id: load_prompt
        run: |
          # Read the prompt from file and set it as an output
          PROMPT_CONTENT=$(cat ${{ steps.generate_prompt.outputs.prompt_file }})
          
          # Use a delimiter for multi-line content
          echo "prompt<<PROMPT_EOF" >> $GITHUB_OUTPUT
          echo "$PROMPT_CONTENT" >> $GITHUB_OUTPUT
          echo "PROMPT_EOF" >> $GITHUB_OUTPUT

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          model: ${{ steps.determine_model.outputs.model }}
          use_sticky_comment: true

          # Direct prompt for automated review (no @claude mention needed)
          direct_prompt: ${{ steps.load_prompt.outputs.prompt }}

          allowed_tools: |
            Bash
            mcp__sequential-thinking__sequentialthinking
            mcp__playwright__browser_close
            mcp__playwright__browser_resize
            mcp__playwright__browser_console_messages
            mcp__playwright__browser_handle_dialog
            mcp__playwright__browser_file_upload
            mcp__playwright__browser_install
            mcp__playwright__browser_press_key
            mcp__playwright__browser_navigate
            mcp__playwright__browser_navigate_back
            mcp__playwright__browser_navigate_forward
            mcp__playwright__browser_network_requests
            mcp__playwright__browser_pdf_save
            mcp__playwright__browser_take_screenshot
            mcp__playwright__browser_snapshot
            mcp__playwright__browser_click
            mcp__playwright__browser_drag
            mcp__playwright__browser_hover
            mcp__playwright__browser_type
            mcp__playwright__browser_select_option
            mcp__playwright__browser_tab_list
            mcp__playwright__browser_tab_new
            mcp__playwright__browser_tab_select
            mcp__playwright__browser_tab_close
            mcp__playwright__browser_generate_playwright_test
            mcp__playwright__browser_wait_for
            mcp__fetch__imageFetch
            mcp__context7__resolve-library-id
            mcp__context7__get-library-docs

          mcp_config: |
            {
              "mcpServers": {
                "sequential-thinking": {
                  "command": "npx",
                  "args": [
                    "-y",
                    "@modelcontextprotocol/server-sequential-thinking"
                  ]
                },
                "playwright": {
                  "command": "npx",
                  "args": [
                    "-y",
                    "@playwright/mcp@latest"
                  ]
                },
                "fetch": {
                  "command": "npx",
                  "args": [
                    "-y",
                    "@modelcontextprotocol/server-fetch"
                  ]
                },
                "context7": {
                  "transport": {
                    "type": "http",
                    "url": "https://mcp.context7.com/mcp"
                  }
                }
              }
            }
