name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]
  workflow_dispatch:
    inputs:
      model:
        description: 'Claude model to use'
        required: false
        default: 'claude-sonnet-4-20250514'
        type: choice
        options:
          - claude-sonnet-4-20250514
          - claude-opus-4-20250514
          - claude-haiku-4-20250514

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Parse model from comment
        id: parse_model
        run: |
          # Default model
          MODEL="claude-sonnet-4-20250514"

          # Check workflow dispatch input first
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ inputs.model }}" ]; then
            MODEL="${{ inputs.model }}"
          else
            # Parse comment body for model selection
            COMMENT_BODY=""
            if [ "${{ github.event_name }}" == "issue_comment" ]; then
              COMMENT_BODY="${{ github.event.comment.body }}"
            elif [ "${{ github.event_name }}" == "pull_request_review_comment" ]; then
              COMMENT_BODY="${{ github.event.comment.body }}"
            elif [ "${{ github.event_name }}" == "pull_request_review" ]; then
              COMMENT_BODY="${{ github.event.review.body }}"
            elif [ "${{ github.event_name }}" == "issues" ]; then
              COMMENT_BODY="${{ github.event.issue.body }}"
            fi

            # Parse model from comment (case insensitive)
            if echo "$COMMENT_BODY" | grep -iE "@claude.*(opus|--model=opus|use opus)" > /dev/null; then
              MODEL="claude-opus-4-20250514"
            elif echo "$COMMENT_BODY" | grep -iE "@claude.*(haiku|--model=haiku|use haiku)" > /dev/null; then
              MODEL="claude-haiku-4-20250514"
            elif echo "$COMMENT_BODY" | grep -iE "@claude.*(sonnet|--model=sonnet|use sonnet)" > /dev/null; then
              MODEL="claude-sonnet-4-20250514"
            fi
          fi

          echo "model=$MODEL" >> $GITHUB_OUTPUT
          echo "Using Claude model: $MODEL"

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          model: ${{ steps.parse_model.outputs.model }}

          allowed_tools: |
            Bash
            mcp__sequential-thinking__sequentialthinking

          custom_instructions: |
            You are working on the LilNAS monorepo - a self-hosted NAS system with multiple integrated services.
            
            ## Repository Structure
            - Monorepo using pnpm workspaces with Turbo build orchestration
            - TypeScript throughout (avoid 'any' types)
            - IMPORTANT: Check CLAUDE.md for detailed development instructions
            
            ## Package Types & Key Patterns
            
            ### Frontend Apps
            - @lilnas/apps (Next.js 14): Portal/dashboard using App Router, Tailwind CSS, Jotai for state
            - @lilnas/dashcam (Vite+React): Video viewer application
            
            ### Backend Services (NestJS)
            - @lilnas/equations: LaTeX rendering (SECURITY CRITICAL - see SECURITY.md)
            - @lilnas/me-token-tracker: Crypto tracking Discord bot
            
            ### Full-Stack Apps (NestJS + Next.js)
            - @lilnas/tdr-bot: AI Discord bot with LangChain/OpenAI integration
            - @lilnas/download: Video download service with yt-dlp/ffmpeg
            
            ### Development Tools
            - @lilnas/cli: Docker Compose management (./lilnas command)
            - @lilnas/utils, eslint-config, prettier-config: Shared configs
            
            ## Key Commands
            - Build: pnpm run build (uses Turbo caching)
            - Test: pnpm test (Jest)
            - Lint/Format: pnpm run lint:fix
            - Service management: ./lilnas dev [start|stop|logs]
            
            ## Critical Guidelines
            1. Follow existing patterns in the codebase
            2. Security: Never expose secrets, validate inputs, use secure spawn
            3. Use workspace:* for cross-package dependencies
            4. Multi-stage Docker builds for production
            5. Test coverage expected for new features
            6. Run lint and type-check before completing tasks
            
            ## Infrastructure
            - Traefik reverse proxy with Let's Encrypt SSL
            - MinIO for S3-compatible storage
            - Docker Compose for orchestration
            - Development: *.localhost domains
            - Production: *.lilnas.io domains
            
            When in doubt, refer to CLAUDE.md for detailed instructions and patterns.

          mcp_config: |
            {
              "mcpServers": {
                "sequential-thinking": {
                  "command": "npx",
                  "args": [
                    "-y",
                    "@modelcontextprotocol/server-sequential-thinking"
                  ]
                }
              }
            }
