services:
  dashcam:
    build:
      context: ../
      target: dashcam
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.dashcam.rule=Host(`dashcam.lilnas.io`)
      - traefik.http.routers.dashcam.entrypoints=websecure
      - traefik.http.routers.dashcam.tls.certresolver=le

  owncast:
    image: owncast/owncast
    restart: unless-stopped
    ports:
      - 1935:1935
    labels:
      - traefik.enable=true
      - traefik.http.routers.owncast.rule=Host(`stream.lilnas.io`)
      - traefik.http.routers.owncast.entrypoints=websecure
      - traefik.http.routers.owncast.tls.certresolver=le
      - traefik.http.services.owncast.loadbalancer.server.port=8080

  apps:
    build:
      context: ../
      target: apps
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - traefik.enable=true
      - traefik.http.routers.apps.rule=Host(`apps.lilnas.io`)
      - traefik.http.routers.apps.entrypoints=websecure
      - traefik.http.routers.apps.tls.certresolver=le
      - traefik.http.routers.apps.middlewares=forward-auth
      - traefik.http.services.apps.loadbalancer.server.port=8080

  me-token-tracker:
    build:
      context: ../
      target: me-token-tracker
    restart: unless-stopped
    env_file:
      - .env.me-token-tracker

  tdr-bot:
    build:
      context: ../
      target: tdr-bot
    restart: unless-stopped
    env_file:
      - .env.tdr-bot
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - traefik.enable=true
      - traefik.http.routers.tdr.rule=Host(`tdr.lilnas.io`)
      - traefik.http.routers.tdr.entrypoints=websecure
      - traefik.http.routers.tdr.tls.certresolver=le
      - traefik.http.routers.tdr.middlewares=forward-auth
      - traefik.http.services.tdr.loadbalancer.server.port=8080

  equations:
    build:
      context: ../
      target: equations
    restart: unless-stopped
    env_file:
      - .env.equations
    labels:
      - traefik.enable=true
      - traefik.http.routers.equations.rule=Host(`equations.lilnas.io`)
      - traefik.http.routers.equations.entrypoints=websecure
      - traefik.http.routers.equations.tls.certresolver=le
      - traefik.http.services.equations.loadbalancer.server.port=8080

  download:
    build:
      context: ../
      target: download
    restart: unless-stopped
    env_file:
      - .env.download
    labels:
      - traefik.enable=true
      - traefik.http.routers.download.rule=Host(`download.lilnas.io`)
      - traefik.http.routers.download.entrypoints=websecure
      - traefik.http.routers.download.tls.certresolver=le
      - traefik.http.services.download.loadbalancer.server.port=8080
