# Default values for sabnzbd
# This is a YAML-formatted file.
# Declare variables to be substituted into your templates.

# Deployment configuration
replicaCount: 1
namespace: lilnas-media

# Image configuration
image:
  repository: lscr.io/linuxserver/sabnzbd
  tag: "latest"
  pullPolicy: Always

# Image pull secrets for private registries
imagePullSecrets: []

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 8080
  annotations: {}

# Service account configuration
serviceAccount:
  create: true
  annotations:
    kubernetes.io/description: "Service account for SABnzbd service"
  name: ""

# Configuration
config:
  # Timezone
  TZ: "America/Los_Angeles"
  # PUID and PGID for file permissions (set via securityContext)
  PUID: "1000"
  PGID: "1000"

# Ingress configuration
ingress:
  enabled: true
  className: traefik
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
    # NO forward-auth middleware - SABnzbd handles its own authentication
    kubernetes.io/description: "Ingress for SABnzbd service"
  hosts:
    - host: sabnzbd.lilnas.io
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              port:
                number: 80
  tls:
    - hosts:
        - sabnzbd.lilnas.io
      secretName: sabnzbd-lilnas-io-tls
  certManager:
    clusterIssuer: letsencrypt-prod

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  seccompProfile:
    type: RuntimeDefault

securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop:
    - ALL

# Container security context configuration - disabled for LinuxServer.io compatibility
containerSecurityContext:
  enabled: false

# Volume mounts
volumeMounts:
  - name: tmp
    mountPath: /tmp
  - name: config
    mountPath: /config

volumes:
  - name: tmp
    emptyDir: {}

# Health check configuration
livenessProbe:
  enabled: true
  path: /
  port: http
  initialDelaySeconds: 120
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 3

readinessProbe:
  enabled: true
  path: /
  port: http
  initialDelaySeconds: 60
  periodSeconds: 15
  timeoutSeconds: 5
  failureThreshold: 3

# Resource limits - SABnzbd needs moderate resources
resources:
  requests:
    memory: "256Mi"
    cpu: "200m"
  limits:
    memory: "1Gi"
    cpu: "1000m"

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Autoscaling configuration
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 2
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Common labels to apply to all resources
commonLabels: {}

# Common annotations to apply to all resources
commonAnnotations: {}

# Name overrides
nameOverride: ""
fullnameOverride: ""

# Additional environment variables
extraEnv: []

# Additional environment variables from ConfigMaps or Secrets
extraEnvFrom: []

# Persistence configuration for SABnzbd data
persistence:
  enabled: true
  storageClass: "hdd-storage"
  accessModes:
    - ReadWriteOnce
  size: 50Gi
  mountPath: /config
  annotations: {}
  # Selector to bind to specific PV - media-services-pv
  selector:
    matchLabels:
      storage.lilnas.io/volume-type: media-services
  # Note: Using hdd-storage class to access /mnt/hdd1/data/k8s-volumes/media-services
  # Existing data at /mnt/hdd1/data/media/sabnzbd/ will need to be moved to PVC mount point

# Temporary volume configuration
tmpVolume:
  enabled: true
  sizeLimit: 1Gi

# Cache volume configuration
cacheVolume:
  enabled: false

# Network policy configuration
networkPolicy:
  enabled: false
  # Allow egress for Usenet connections
  egress:
    - {}  # Allow all egress by default

# Init containers configuration
initContainers:
  # Fix hostname whitelist for ingress access
  - name: fix-hostname-whitelist
    image: busybox:1.35
    command: ['sh', '-c']
    resources:
      requests:
        memory: "32Mi"
        cpu: "50m"
      limits:
        memory: "64Mi"
        cpu: "100m"
    args:
      - |
        echo "Fixing SABnzbd hostname whitelist..."
        CONFIG_FILE="/config/sabnzbd.ini"
        HOSTNAME="sabnzbd.lilnas.io"
        
        # Wait for config file to exist (in case of first run)
        for i in $(seq 1 30); do
          if [ -f "$CONFIG_FILE" ]; then
            echo "Config file found"
            break
          fi
          echo "Waiting for config file... ($i/30)"
          sleep 2
        done
        
        if [ ! -f "$CONFIG_FILE" ]; then
          echo "Config file not found, creating basic structure..."
          mkdir -p /config
          touch "$CONFIG_FILE"
        fi
        
        # Check if host_whitelist line exists
        if grep -q "^host_whitelist" "$CONFIG_FILE"; then
          # Get current whitelist value
          CURRENT=$(grep "^host_whitelist" "$CONFIG_FILE" | cut -d'=' -f2 | tr -d ' ')
          
          # Check if our hostname is already there
          if echo "$CURRENT" | grep -q "$HOSTNAME"; then
            echo "Hostname $HOSTNAME already in whitelist"
          else
            echo "Adding $HOSTNAME to existing whitelist"
            # Remove trailing comma if present, add our hostname with comma
            NEW_VALUE=$(echo "$CURRENT" | sed 's/,*$//')
            if [ -n "$NEW_VALUE" ]; then
              NEW_VALUE="$NEW_VALUE,$HOSTNAME,"
            else
              NEW_VALUE="$HOSTNAME,"
            fi
            
            # Replace the line
            sed -i "s/^host_whitelist.*$/host_whitelist = $NEW_VALUE/" "$CONFIG_FILE"
          fi
        else
          echo "Adding host_whitelist line to config"
          # Add the line to the [misc] section or end of file
          if grep -q "^\[misc\]" "$CONFIG_FILE"; then
            sed -i "/^\[misc\]/a host_whitelist = $HOSTNAME," "$CONFIG_FILE"
          else
            echo "host_whitelist = $HOSTNAME," >> "$CONFIG_FILE"
          fi
        fi
        
        echo "Hostname whitelist configuration complete"
        grep "host_whitelist" "$CONFIG_FILE" || echo "Warning: host_whitelist not found after modification"
    volumeMounts:
      - name: data
        mountPath: /config