# Default values for radarr
# This is a YAML-formatted file.
# Declare variables to be substituted into your templates.

# Deployment configuration
replicaCount: 1
namespace: lilnas-media

# Image configuration
image:
  repository: lscr.io/linuxserver/radarr
  tag: "latest"
  pullPolicy: Always

# Image pull secrets for private registries
imagePullSecrets: []

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 7878
  annotations: {}

# Service account configuration
serviceAccount:
  create: true
  annotations:
    kubernetes.io/description: "Service account for Radarr service"
  name: ""

# Configuration
config:
  # Timezone
  TZ: "America/Los_Angeles"
  # PUID and PGID for file permissions (set via securityContext)
  PUID: "1000"
  PGID: "1000"

# Ingress configuration
ingress:
  enabled: true
  className: traefik
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/router.middlewares: lilnas-core-forward-auth@kubernetescrd
    kubernetes.io/description: "Ingress for Radarr service"
  hosts:
    - host: radarr.lilnas.io
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              port:
                number: 80
  tls:
    - hosts:
        - radarr.lilnas.io
      secretName: radarr-lilnas-io-tls
  certManager:
    clusterIssuer: letsencrypt-prod

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  seccompProfile:
    type: RuntimeDefault

securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop:
    - ALL

# Container security context configuration - disabled for LinuxServer.io compatibility
containerSecurityContext:
  enabled: false

# Additional volume mounts (beyond persistence volumes)
volumeMounts: []

# Additional volumes (beyond persistence volumes)  
volumes: []

# Health check configuration
livenessProbe:
  enabled: true
  path: /ping  # Use unauthenticated endpoint
  port: http
  initialDelaySeconds: 120
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 3

readinessProbe:
  enabled: true
  path: /ping  # Use unauthenticated endpoint
  port: http
  initialDelaySeconds: 60
  periodSeconds: 15
  timeoutSeconds: 5
  failureThreshold: 3

# Resource limits - Radarr needs moderate resources for media processing
resources:
  requests:
    memory: "256Mi"
    cpu: "200m"
  limits:
    memory: "1Gi"
    cpu: "1000m"

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Autoscaling configuration
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 2
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Common labels to apply to all resources
commonLabels: {}

# Common annotations to apply to all resources
commonAnnotations: {}

# Name overrides
nameOverride: ""
fullnameOverride: ""

# Additional environment variables
extraEnv: []

# Additional environment variables from ConfigMaps or Secrets
extraEnvFrom: []

# Persistence configuration for Radarr data
persistence:
  # Configuration data persistence
  config:
    enabled: true
    storageClass: "local-path"
    accessModes:
      - ReadWriteOnce
    size: 10Gi
    annotations: {}
    # Note: Selectors removed for compatibility with dynamic provisioning
  
  # Movies storage
  movies:
    enabled: true
    storageClass: "hdd-media-storage"
    accessModes:
      - ReadWriteOnce
    size: 1Ti
    annotations: {}
    # Use existing movies storage
    existingClaim: ""
  
  # Downloads storage
  downloads:
    enabled: true
    storageClass: "local-path"
    accessModes:
      - ReadWriteOnce
    size: 10Gi
    annotations: {}
    # Use existing downloads storage
    existingClaim: ""

# Temporary volume configuration
tmpVolume:
  enabled: true
  sizeLimit: 1Gi

# Cache volume configuration
cacheVolume:
  enabled: false

# Network policy configuration
networkPolicy:
  enabled: false
  # Allow egress for indexer connections and download clients
  egress:
    - {}  # Allow all egress by default

# Init containers configuration
initContainers: []

# Movies media volume - for storing movies
mediaVolume:
  enabled: true
  storageClass: "hdd-media-storage"
  accessModes:
    - ReadWriteOnce
  size: 100Gi
  mountPath: /movies
  annotations: {}
  # Selector to bind to specific PV for media storage
  selector:
    matchLabels:
      storage.lilnas.io/volume-type: movies-media