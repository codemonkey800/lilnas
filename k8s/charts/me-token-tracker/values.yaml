# Default values for me-token-tracker
# This is a YAML-formatted file.
# Declare variables to be substituted into your templates.

# Deployment configuration
replicaCount: 1
namespace: lilnas-apps

# Image configuration
image:
  repository: ghcr.io/codemonkey800/lilnas-me-token-tracker
  tag: "latest"
  pullPolicy: Always

# Image pull secrets for private registries
imagePullSecrets: []

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 8080
  annotations: {}

# Service account configuration
serviceAccount:
  create: true
  annotations:
    kubernetes.io/description: "Service account for ME Token Tracker Discord bot"
  name: ""

# Configuration
config:
  # Node environment
  NODE_ENV: "production"
  # Timezone
  TZ: "America/Los_Angeles"

# Secrets configuration
# These values are used to create a secret if existingSecret is not specified
secrets:
  # Discord configuration
  API_TOKEN: ""
  APPLICATION_ID: ""
  CLIENT_ID: ""
  CLIENT_SECRET: ""
  DEV_GUILD_ID: ""
  PUBLIC_KEY: ""

# Use an existing secret for authentication
existingSecret: ""

# Ingress configuration - disabled for Discord bot
ingress:
  enabled: false

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  seccompProfile:
    type: RuntimeDefault

securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop:
    - ALL

# Container security context configuration
containerSecurityContext:
  enabled: true
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop:
    - ALL

# Volume mounts for temporary directories
volumeMounts:
  - name: tmp
    mountPath: /tmp
  - name: cache
    mountPath: /app/.cache

volumes:
  - name: tmp
    emptyDir: {}
  - name: cache
    emptyDir: {}

# Health check configuration
livenessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 30
  periodSeconds: 15
  timeoutSeconds: 5
  failureThreshold: 3

# Resource limits - Discord bot needs minimal resources
resources:
  requests:
    memory: "256Mi"
    cpu: "100m"
  limits:
    memory: "512Mi"
    cpu: "500m"

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Autoscaling configuration
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Common labels to apply to all resources
commonLabels: {}

# Common annotations to apply to all resources
commonAnnotations: {}

# Name overrides
nameOverride: ""
fullnameOverride: ""

# Additional environment variables
extraEnv: []
# - name: EXTRA_VAR
#   value: "extra-value"

# Additional environment variables from ConfigMaps or Secrets
extraEnvFrom: []
# - configMapRef:
#     name: extra-config
# - secretRef:
#     name: extra-secret

# Persistence configuration (not needed for Discord bot)
persistence:
  enabled: false

# Temporary volume configuration
tmpVolume:
  enabled: true
  sizeLimit: 100Mi

# Cache volume configuration
cacheVolume:
  enabled: true
  sizeLimit: 100Mi

# Network policy configuration
networkPolicy:
  enabled: false
  # Allow egress for Discord API
  egress:
    - {}  # Allow all egress by default

# Init containers configuration
initContainers: []

# RBAC configuration
rbac:
  create: false
  rules: []