# Default values for apps
# This is a YAML-formatted file.
# Declare variables to be substituted into your templates.

# Deployment configuration
replicaCount: 1
namespace: lilnas-apps

# Image configuration
image:
  repository: ghcr.io/codemonkey800/lilnas-apps
  tag: "latest"
  pullPolicy: Always

# Image pull secrets for private registries
imagePullSecrets: []

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 8080
  annotations: {}

# Service account configuration
serviceAccount:
  create: true
  annotations:
    kubernetes.io/description: "Service account for lilnas apps dashboard"
  name: ""

# Configuration
config:
  PORT: "8080"
  NODE_ENV: "production"

# Secrets configuration (if needed)
secrets: {}

# Use an existing secret for environment variables
existingSecret: ""

# Ingress configuration
ingress:
  enabled: true
  className: traefik
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/router.middlewares: lilnas-core-traefik-forward-auth@kubernetescrd
    kubernetes.io/description: "Ingress for lilnas apps dashboard"
  hosts:
    - host: apps.lilnas.io
      paths:
        - path: /
          pathType: Prefix
  tls:
    - hosts:
        - apps.lilnas.io
      secretName: apps-lilnas-io-tls
  certManager:
    clusterIssuer: letsencrypt-prod

# Pod disruption budget (disabled for single replica)
podDisruptionBudget:
  enabled: false
  minAvailable: 1

# Security context
podSecurityContext:
  enabled: true
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  seccompProfile:
    type: RuntimeDefault

# Container security context configuration
containerSecurityContext:
  enabled: true
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop:
    - ALL

# Health check configuration
livenessProbe:
  enabled: true
  httpGet:
    path: /api/health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 30
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  enabled: true
  httpGet:
    path: /api/health
    port: http
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 3
  failureThreshold: 3

# Resource limits
resources:
  requests:
    memory: "128Mi"
    cpu: "100m"
  limits:
    memory: "256Mi"
    cpu: "500m"

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Autoscaling configuration
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Common labels to apply to all resources
commonLabels: {}

# Common annotations to apply to all resources
commonAnnotations: {}

# Name overrides
nameOverride: ""
fullnameOverride: ""

# Additional environment variables
extraEnv: []
# - name: EXTRA_VAR
#   value: "extra-value"

# Additional environment variables from ConfigMaps or Secrets
extraEnvFrom: []
# - configMapRef:
#     name: extra-config
# - secretRef:
#     name: extra-secret

# Volume mounts for Next.js cache
volumeMounts:
  - name: nextjs-cache
    mountPath: /.next/cache

volumes:
  - name: nextjs-cache
    emptyDir: {}

# RBAC configuration
rbac:
  create: true
  rules: []
  ingressReader:
    enabled: false

# Persistence configuration (not needed for Next.js app)
persistence:
  enabled: false

# Temporary volume configuration (if needed)
tmpVolume:
  enabled: false
  sizeLimit: 100Mi

# Cache volume configuration (if needed)
cacheVolume:
  enabled: false

# Network policy configuration
networkPolicy:
  enabled: false

# Init containers configuration
initContainers: []

# Additional volumes (beyond the default Next.js cache)
extraVolumes: []

# Additional volume mounts (beyond the default Next.js cache mount)
extraVolumeMounts: []
