{{- if .Values.initJob.enabled -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "minio.fullname" . }}-init
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "minio.labels" . | nindent 4 }}
    component: init
spec:
  backoffLimit: {{ .Values.initJob.backoffLimit }}
  template:
    metadata:
      labels:
        {{- include "minio.selectorLabels" . | nindent 8 }}
        component: init
    spec:
      restartPolicy: OnFailure
      containers:
      - name: minio-init
        image: "{{ .Values.initJob.image.repository }}:{{ .Values.initJob.image.tag }}"
        imagePullPolicy: {{ .Values.initJob.image.pullPolicy }}
        envFrom:
        - secretRef:
            name: {{ include "minio.secretName" . }}
        env:
        - name: MINIO_HOST
          value: "{{ include "minio.fullname" . }}-api.{{ .Values.namespace }}.svc.cluster.local:{{ .Values.service.apiPort }}"
        command:
        - /bin/sh
        - -c
        - |
          echo "Waiting for MinIO to be ready..."
          until mc alias set minio http://$MINIO_HOST $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD; do
            echo "MinIO not ready yet, waiting..."
            sleep 5
          done
          
          echo "MinIO is ready, setting up buckets and policies..."
          
          {{- range .Values.initJob.buckets }}
          # Create {{ .name }} bucket if it doesn't exist
          mc mb minio/{{ .name }} --ignore-existing
          
          {{- if .public }}
          # Set public read policy for {{ .name }} bucket
          mc anonymous set public minio/{{ .name }}
          {{- end }}
          {{- end }}
          
          echo "MinIO initialization complete!"
{{- end }}