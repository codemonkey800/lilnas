# Production values for tdr-bot
# This overrides the default values.yaml for production environment

# Production namespace
namespace: lilnas-apps

# Production-specific configuration
config:
  # Production environment
  NODE_ENV: "production"
  # Production MinIO URL
  MINIO_PUBLIC_URL: "https://storage.lilnas.io"
  # Production service URLs
  EQUATIONS_URL: "http://equations.lilnas-apps.svc.cluster.local:80"

# Production ingress configuration
ingress:
  enabled: true
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/router.middlewares: lilnas-core-forward-auth@kubernetescrd
    kubernetes.io/description: "Production ingress for TDR Discord bot"
  hosts:
    - host: tdr.lilnas.io
      paths:
        - path: /
          pathType: Prefix
  tls:
    - hosts:
        - tdr.lilnas.io
      secretName: tdr-lilnas-io-tls
  certManager:
    clusterIssuer: letsencrypt-prod

# Production resource limits - higher for AI processing
resources:
  requests:
    memory: "1Gi"
    cpu: "500m"
  limits:
    memory: "2Gi"
    cpu: "1000m"

# Production-specific labels
commonLabels:
  environment: prod

# Production-specific annotations
commonAnnotations:
  environment: production
  deployed-by: "production-team"

# Single replica for production (can be scaled up)
replicaCount: 1

# Enable pod disruption budget for production
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Autoscaling configuration for production
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 2
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Production security hardening
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  seccompProfile:
    type: RuntimeDefault

securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop:
    - ALL

# Production health check configuration
livenessProbe:
  enabled: true
  path: /health
  port: 8081
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 3

readinessProbe:
  enabled: true
  path: /health
  port: 8081
  initialDelaySeconds: 30
  periodSeconds: 15
  timeoutSeconds: 5
  failureThreshold: 3

# Extra ports for backend health endpoint
extraPorts:
  - name: backend
    containerPort: 8081
    protocol: TCP

# Network policy for production
networkPolicy:
  enabled: false
  # Allow egress for Discord API, OpenAI API, etc.
  egress:
    - {}  # Allow all egress by default for external APIs