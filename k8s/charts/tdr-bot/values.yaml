# Default values for tdr-bot
# This is a YAML-formatted file.
# Declare variables to be substituted into your templates.

# Deployment configuration
replicaCount: 1
namespace: lilnas-apps

# Image configuration
image:
  repository: ghcr.io/codemonkey800/lilnas-tdr-bot
  tag: "latest"
  pullPolicy: Always

# Image pull secrets for private registries
imagePullSecrets: []

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 8080
  annotations: {}

# Service account configuration
serviceAccount:
  create: true
  annotations:
    kubernetes.io/description: "Service account for TDR Discord bot"
  name: ""

# Configuration
config:
  # Frontend configuration
  FRONTEND_PORT: "8080"
  # Backend configuration
  BACKEND_PORT: "8081"
  # Download polling configuration
  DOWNLOAD_POLL_DURATION_MS: "2000"
  DOWNLOAD_POLL_RETRIES: "50"
  # Timezone
  TZ: "America/Los_Angeles"
  # Node environment
  NODE_ENV: "production"
  # Service URLs for Kubernetes
  EQUATIONS_URL: "http://equations.lilnas-apps.svc.cluster.local:8080"
  MINIO_HOST: "minio-api.lilnas-core.svc.cluster.local"
  MINIO_PORT: "9000"
  MINIO_PUBLIC_URL: "https://storage.lilnas.io"

# Secrets configuration
# These values are used to create a secret if existingSecret is not specified
secrets:
  # Discord configuration
  DISCORD_API_TOKEN: ""
  DISCORD_CLIENT_ID: ""
  DISCORD_DEV_GUILD_ID: ""
  # API keys
  OPENAI_API_KEY: ""
  TAVILY_API_KEY: ""
  HUGGING_FACE_TOKEN: ""
  SERP_API_KEY: ""
  # Service API keys
  OMBI_API_KEY: ""
  EQUATIONS_API_KEY: ""
  # MinIO credentials
  MINIO_ACCESS_KEY: ""
  MINIO_SECRET_KEY: ""

# Use an existing secret for authentication
existingSecret: ""

# Docker socket configuration (SECURITY RISK - disabled by default)
dockerSocket:
  enabled: false
  # When enabled, mounts Docker socket for container management
  # This requires special RBAC permissions and poses security risks
  # Consider migrating to Kubernetes API calls instead
  hostPath: /var/run/docker.sock

# Ingress configuration
ingress:
  enabled: true
  className: traefik
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/router.middlewares: lilnas-core-forward-auth@kubernetescrd
    kubernetes.io/description: "Ingress for TDR Discord bot admin interface"
  hosts:
    - host: tdr.lilnas.io
      paths:
        - path: /
          pathType: Prefix
  tls:
    - hosts:
        - tdr.lilnas.io
      secretName: tdr-lilnas-io-tls
  certManager:
    clusterIssuer: letsencrypt-prod

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  seccompProfile:
    type: RuntimeDefault

securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop:
    - ALL

# Container security context configuration
containerSecurityContext:
  enabled: true
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop:
    - ALL

# Volume mounts for temporary directories
volumeMounts:
  - name: tmp
    mountPath: /tmp
  - name: cache
    mountPath: /app/.cache
  - name: data
    mountPath: /app/data

volumes:
  - name: tmp
    emptyDir: {}
  - name: cache
    emptyDir: {}
  - name: data
    emptyDir: {}

# Health check configuration
livenessProbe:
  enabled: true
  path: /health
  port: http
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 3

readinessProbe:
  enabled: true
  path: /health
  port: http
  initialDelaySeconds: 30
  periodSeconds: 15
  timeoutSeconds: 5
  failureThreshold: 3

# Resource limits - AI processing needs higher resources
resources:
  requests:
    memory: "1Gi"
    cpu: "500m"
  limits:
    memory: "2Gi"
    cpu: "1000m"

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Autoscaling configuration
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Common labels to apply to all resources
commonLabels: {}

# Common annotations to apply to all resources
commonAnnotations: {}

# Name overrides
nameOverride: ""
fullnameOverride: ""

# Additional environment variables
extraEnv: []
# - name: EXTRA_VAR
#   value: "extra-value"

# Additional environment variables from ConfigMaps or Secrets
extraEnvFrom: []
# - configMapRef:
#     name: extra-config
# - secretRef:
#     name: extra-secret

# Persistence configuration (if needed for bot data)
persistence:
  enabled: false
  storageClass: "hdd-storage"
  accessMode: ReadWriteOnce
  size: 10Gi
  mountPath: /app/data
  annotations: {}

# Temporary volume configuration
tmpVolume:
  enabled: true
  sizeLimit: 500Mi

# Cache volume configuration
cacheVolume:
  enabled: true
  sizeLimit: 1Gi

# Network policy configuration
networkPolicy:
  enabled: false
  # Allow egress for Discord API, OpenAI API, etc.
  egress:
    - {}  # Allow all egress by default

# Init containers configuration
initContainers: []

# RBAC configuration for Docker socket access
rbac:
  create: false
  # Enable only if dockerSocket.enabled is true
  rules: []
  # - apiGroups: [""]
  #   resources: ["pods", "services"]
  #   verbs: ["get", "list", "create", "delete"]