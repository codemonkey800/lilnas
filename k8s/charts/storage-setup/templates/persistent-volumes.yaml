# Persistent Volumes for lilnas k8s cluster
# These define pre-allocated storage resources for various services

{{- $nodeSelector := .Values.nodeSelector }}

{{- if .Values.persistentVolumes.appConfigs.enabled }}
---
# Application configuration storage
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Values.persistentVolumes.appConfigs.name }}
  labels:
    {{- include "storage-setup.labels" . | nindent 4 }}
    storage.lilnas.io/volume-type: "app-configs"
spec:
  capacity:
    storage: {{ .Values.persistentVolumes.appConfigs.capacity }}
  accessModes:
    {{- toYaml .Values.persistentVolumes.appConfigs.accessModes | nindent 4 }}
  persistentVolumeReclaimPolicy: {{ .Values.reclaimPolicy }}
  storageClassName: {{ .Values.persistentVolumes.appConfigs.storageClass }}
  local:
    path: {{ .Values.persistentVolumes.appConfigs.path }}
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - {{ $nodeSelector.hostname }}
{{- end }}

{{- if .Values.persistentVolumes.buildCache.enabled }}
---
# Build cache storage for CI/CD
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Values.persistentVolumes.buildCache.name }}
  labels:
    {{- include "storage-setup.labels" . | nindent 4 }}
    storage.lilnas.io/volume-type: "build-cache"
spec:
  capacity:
    storage: {{ .Values.persistentVolumes.buildCache.capacity }}
  accessModes:
    {{- toYaml .Values.persistentVolumes.buildCache.accessModes | nindent 4 }}
  persistentVolumeReclaimPolicy: {{ .Values.reclaimPolicy }}
  storageClassName: {{ .Values.persistentVolumes.buildCache.storageClass }}
  local:
    path: {{ .Values.persistentVolumes.buildCache.path }}
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - {{ $nodeSelector.hostname }}
{{- end }}

{{- if .Values.persistentVolumes.gameServers.enabled }}
---
# Game servers storage
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Values.persistentVolumes.gameServers.name }}
  labels:
    {{- include "storage-setup.labels" . | nindent 4 }}
    storage.lilnas.io/volume-type: "game-servers"
spec:
  capacity:
    storage: {{ .Values.persistentVolumes.gameServers.capacity }}
  accessModes:
    {{- toYaml .Values.persistentVolumes.gameServers.accessModes | nindent 4 }}
  persistentVolumeReclaimPolicy: {{ .Values.reclaimPolicy }}
  storageClassName: {{ .Values.persistentVolumes.gameServers.storageClass }}
  local:
    path: {{ .Values.persistentVolumes.gameServers.path }}
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - {{ $nodeSelector.hostname }}
{{- end }}

{{- if .Values.persistentVolumes.googlePhotos.enabled }}
---
# Google Photos storage
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Values.persistentVolumes.googlePhotos.name }}
  labels:
    {{- include "storage-setup.labels" . | nindent 4 }}
    storage.lilnas.io/volume-type: "google-photos"
spec:
  capacity:
    storage: {{ .Values.persistentVolumes.googlePhotos.capacity }}
  accessModes:
    {{- toYaml .Values.persistentVolumes.googlePhotos.accessModes | nindent 4 }}
  persistentVolumeReclaimPolicy: {{ .Values.reclaimPolicy }}
  storageClassName: {{ .Values.persistentVolumes.googlePhotos.storageClass }}
  local:
    path: {{ .Values.persistentVolumes.googlePhotos.path }}
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - {{ $nodeSelector.hostname }}
{{- end }}

{{- if .Values.persistentVolumes.immichDb.enabled }}
---
# Immich database storage
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Values.persistentVolumes.immichDb.name }}
  labels:
    {{- include "storage-setup.labels" . | nindent 4 }}
    storage.lilnas.io/volume-type: "immich-db"
spec:
  capacity:
    storage: {{ .Values.persistentVolumes.immichDb.capacity }}
  accessModes:
    {{- toYaml .Values.persistentVolumes.immichDb.accessModes | nindent 4 }}
  persistentVolumeReclaimPolicy: {{ .Values.reclaimPolicy }}
  storageClassName: {{ .Values.persistentVolumes.immichDb.storageClass }}
  local:
    path: {{ .Values.persistentVolumes.immichDb.path }}
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - {{ $nodeSelector.hostname }}
{{- end }}

{{- if .Values.persistentVolumes.immichLibrary.enabled }}
---
# Immich library storage
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Values.persistentVolumes.immichLibrary.name }}
  labels:
    {{- include "storage-setup.labels" . | nindent 4 }}
    storage.lilnas.io/volume-type: "immich-library"
spec:
  capacity:
    storage: {{ .Values.persistentVolumes.immichLibrary.capacity }}
  accessModes:
    {{- toYaml .Values.persistentVolumes.immichLibrary.accessModes | nindent 4 }}
  persistentVolumeReclaimPolicy: {{ .Values.reclaimPolicy }}
  storageClassName: {{ .Values.persistentVolumes.immichLibrary.storageClass }}
  local:
    path: {{ .Values.persistentVolumes.immichLibrary.path }}
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - {{ $nodeSelector.hostname }}
{{- end }}

{{- if .Values.persistentVolumes.mediaServices.enabled }}
---
# Media services configuration storage
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Values.persistentVolumes.mediaServices.name }}
  labels:
    {{- include "storage-setup.labels" . | nindent 4 }}
    storage.lilnas.io/volume-type: "media-services"
spec:
  capacity:
    storage: {{ .Values.persistentVolumes.mediaServices.capacity }}
  accessModes:
    {{- toYaml .Values.persistentVolumes.mediaServices.accessModes | nindent 4 }}
  persistentVolumeReclaimPolicy: {{ .Values.reclaimPolicy }}
  storageClassName: {{ .Values.persistentVolumes.mediaServices.storageClass }}
  local:
    path: {{ .Values.persistentVolumes.mediaServices.path }}
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - {{ $nodeSelector.hostname }}
{{- end }}

{{- if .Values.persistentVolumes.minioData.enabled }}
---
# MinIO S3 storage
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Values.persistentVolumes.minioData.name }}
  labels:
    {{- include "storage-setup.labels" . | nindent 4 }}
    storage.lilnas.io/volume-type: "minio-data"
spec:
  capacity:
    storage: {{ .Values.persistentVolumes.minioData.capacity }}
  accessModes:
    {{- toYaml .Values.persistentVolumes.minioData.accessModes | nindent 4 }}
  persistentVolumeReclaimPolicy: {{ .Values.reclaimPolicy }}
  storageClassName: {{ .Values.persistentVolumes.minioData.storageClass }}
  local:
    path: {{ .Values.persistentVolumes.minioData.path }}
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - {{ $nodeSelector.hostname }}
{{- end }}

{{- if .Values.persistentVolumes.movies.enabled }}
---
# Movies storage
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Values.persistentVolumes.movies.name }}
  labels:
    {{- include "storage-setup.labels" . | nindent 4 }}
    storage.lilnas.io/volume-type: "movies"
spec:
  capacity:
    storage: {{ .Values.persistentVolumes.movies.capacity }}
  accessModes:
    {{- toYaml .Values.persistentVolumes.movies.accessModes | nindent 4 }}
  persistentVolumeReclaimPolicy: {{ .Values.reclaimPolicy }}
  storageClassName: {{ .Values.persistentVolumes.movies.storageClass }}
  local:
    path: {{ .Values.persistentVolumes.movies.path }}
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - {{ $nodeSelector.hostname }}
{{- end }}

{{- if .Values.persistentVolumes.postgresMain.enabled }}
---
# PostgreSQL main database storage
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Values.persistentVolumes.postgresMain.name }}
  labels:
    {{- include "storage-setup.labels" . | nindent 4 }}
    storage.lilnas.io/volume-type: "postgres-main"
spec:
  capacity:
    storage: {{ .Values.persistentVolumes.postgresMain.capacity }}
  accessModes:
    {{- toYaml .Values.persistentVolumes.postgresMain.accessModes | nindent 4 }}
  persistentVolumeReclaimPolicy: {{ .Values.reclaimPolicy }}
  storageClassName: {{ .Values.persistentVolumes.postgresMain.storageClass }}
  local:
    path: {{ .Values.persistentVolumes.postgresMain.path }}
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - {{ $nodeSelector.hostname }}
{{- end }}

{{- if .Values.persistentVolumes.redisCache.enabled }}
---
# Redis cache storage
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Values.persistentVolumes.redisCache.name }}
  labels:
    {{- include "storage-setup.labels" . | nindent 4 }}
    storage.lilnas.io/volume-type: "redis-cache"
spec:
  capacity:
    storage: {{ .Values.persistentVolumes.redisCache.capacity }}
  accessModes:
    {{- toYaml .Values.persistentVolumes.redisCache.accessModes | nindent 4 }}
  persistentVolumeReclaimPolicy: {{ .Values.reclaimPolicy }}
  storageClassName: {{ .Values.persistentVolumes.redisCache.storageClass }}
  local:
    path: {{ .Values.persistentVolumes.redisCache.path }}
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - {{ $nodeSelector.hostname }}
{{- end }}

{{- if .Values.persistentVolumes.tv.enabled }}
---
# TV shows storage
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Values.persistentVolumes.tv.name }}
  labels:
    {{- include "storage-setup.labels" . | nindent 4 }}
    storage.lilnas.io/volume-type: "tv"
spec:
  capacity:
    storage: {{ .Values.persistentVolumes.tv.capacity }}
  accessModes:
    {{- toYaml .Values.persistentVolumes.tv.accessModes | nindent 4 }}
  persistentVolumeReclaimPolicy: {{ .Values.reclaimPolicy }}
  storageClassName: {{ .Values.persistentVolumes.tv.storageClass }}
  local:
    path: {{ .Values.persistentVolumes.tv.path }}
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - {{ $nodeSelector.hostname }}
{{- end }}

{{- range .Values.additionalPVs }}
{{- if .enabled }}
---
# Additional PV: {{ .name }}
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .name }}
  labels:
    {{- include "storage-setup.labels" $ | nindent 4 }}
    storage.lilnas.io/volume-type: "additional"
spec:
  capacity:
    storage: {{ .capacity }}
  accessModes:
    {{- toYaml .accessModes | nindent 4 }}
  persistentVolumeReclaimPolicy: {{ $.Values.reclaimPolicy }}
  storageClassName: {{ .storageClass }}
  local:
    path: {{ .path }}
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - {{ $nodeSelector.hostname }}
{{- end }}
{{- end }}