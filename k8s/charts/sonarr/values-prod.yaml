# Production environment overrides for sonarr
# This overrides the default values.yaml for production environment

# Production namespace
namespace: lilnas-media

# Production configuration
config:
  # Production timezone (keep as configured)
  TZ: "America/Los_Angeles"
  # PUID and PGID for file permissions (keep as configured)
  PUID: "1000"
  PGID: "1000"

# Production ingress configuration (already correctly configured for production domain)
ingress:
  enabled: true
  className: traefik
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
    # NO forward-auth middleware - Sonarr handles its own authentication
    kubernetes.io/description: "Production ingress for Sonarr service"
  hosts:
    - host: sonarr.lilnas.io
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: sonarr
              port:
                number: 80
  tls:
    - hosts:
        - sonarr.lilnas.io
      secretName: sonarr-lilnas-io-tls
  certManager:
    clusterIssuer: letsencrypt-prod

# Production resource requirements - Sonarr handles media metadata and API calls
resources:
  requests:
    memory: "512Mi"
    cpu: "300m"
  limits:
    memory: "2Gi"
    cpu: "2000m"

# Production health check configuration with appropriate timeouts for media processing
livenessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 150
  periodSeconds: 45
  timeoutSeconds: 15
  failureThreshold: 5

readinessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 90
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 3

# Production persistence configuration - using existing PVs
persistence:
  # Configuration data persistence - using app-configs-pv
  config:
    enabled: true
    storageClass: "hdd-storage"
    accessModes:
      - ReadWriteOnce
    size: 10Gi  # Must match app-configs-pv
    annotations:
      kubernetes.io/description: "Persistent storage for Sonarr configuration and database"
    selector:
      matchLabels:
        storage.lilnas.io/volume-type: app-configs
  
  # TV shows storage - using tv-pv
  tv:
    enabled: true
    storageClass: "hdd-media-storage"
    accessModes:
      - ReadWriteOnce
    size: 1Ti  # Must match tv-pv
    annotations:
      kubernetes.io/description: "Persistent storage for TV show media library"
  
  # Downloads storage - using downloads-pv
  downloads:
    enabled: true
    storageClass: "hdd-media-storage"
    accessModes:
      - ReadWriteOnce
    size: 1Ti  # Must match downloads-pv
    annotations:
      kubernetes.io/description: "Persistent storage for downloads"
    selector:
      matchLabels:
        storage.lilnas.io/volume-type: downloads

# Increased temporary volume for production metadata processing
tmpVolume:
  enabled: true
  sizeLimit: 2Gi

# Pod disruption budget for high availability
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Common labels for production environment
commonLabels:
  environment: prod
  tier: media

# Common annotations for production
commonAnnotations:
  environment: production
  service-type: media-pvr

# Network policy for production security
networkPolicy:
  enabled: true
  # Allow egress for indexers and download clients
  egress:
    - {}  # Allow all egress for indexers, download clients, and metadata providers
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: lilnas-core
      ports:
        - protocol: TCP
          port: 8989